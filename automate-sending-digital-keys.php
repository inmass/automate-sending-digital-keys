<?php 
/*
Plugin Name: Automate sending digital keys
Plugin URI: https://github.com/inmass/automate-sending-digital-keys
Description: Automate sending digital keys
Version: 1.0.0
Author: iinmass
Author URI: https://iinmass.com
Text Domain: asdk
Generated By: http://ensuredomains.com
*/

function asdk_callback()
{
    // add non admin pages to redirect to another page

    add_menu_page( "ASDK", "ASDK", "", "auto-send-activation-keys", "","dashicons-admin-network", 4);
    add_submenu_page("auto-send-activation-keys", "ASDK Home", "ASDK Home", "manage_options", "asdk-home", "asdk_home");
    add_submenu_page("auto-send-activation-keys","Activation keys","Activation keys","manage_options","activation-keys","activation_keys");
    add_submenu_page("auto-send-activation-keys","Add new key","Add new key","manage_options","add-key","add_key");
    add_submenu_page("auto-send-activation-keys","Keys types","Keys types","manage_options","keys-types","keys_types");
    add_submenu_page("auto-send-activation-keys","Add new key type","Add new key type","manage_options","add-key-type","add_key_type");
    add_submenu_page("auto-send-activation-keys","Orders","Orders","manage_options","orders","orders");
    add_submenu_page("auto-send-activation-keys","Email templates","Email templates","manage_options","email-templates","email_templates");
}

add_action("admin_menu","asdk_callback");




function asdk_home()
{
    include "includes/home.php";
}

function activation_keys()
{
    include "includes/activation_keys.php";
}

function add_key()
{
    include "includes/add_key.php";
}

function keys_types()
{
    include "includes/keys_types.php";
}

function add_key_type()
{
    include "includes/add_key_type.php";
}

function orders()
{
    include "includes/orders.php";
}

function email_templates()
{
    include "includes/email_templates.php";
}






//////////////////////////////////////////////////
register_activation_hook(__FILE__,"createtables");
function createtables()
{
    # code...
    
    global $wpdb;
    $plugin_name_db_version = '1.0.0';
    $charset_collate = $wpdb->get_charset_collate();

    require(ABSPATH . 'wp-admin/includes/upgrade.php');
    
    $table_name = $wpdb->prefix . "asdk_keys";
    $sql = "CREATE TABLE $table_name (
                id mediumint(9) NOT NULL AUTO_INCREMENT PRIMARY KEY,
                activation_key varchar(100) NULL UNIQUE,
                key_type varchar(100) NULL,
                key_count int(11) NULL,
                used BIT DEFAULT 0 NOT NULL
            ) $charset_collate;";
    $wpdb->query($sql);

    $table_name = $wpdb->prefix . "asdk_keys_users"; 
    $sql = "CREATE TABLE $table_name (
            id mediumint(9) NOT NULL AUTO_INCREMENT PRIMARY KEY,
            activation_key varchar(100) NULL,
            key_type varchar(100) NULL,
            sent_to varchar(100) NULL NULL,
            sell_date DATETIME NULL
        ) $charset_collate;";
    $wpdb->query($sql);
    
    $table_name = $wpdb->prefix . "asdk_keys_types"; 
    $sql = "CREATE TABLE $table_name (
            id mediumint(9) NOT NULL AUTO_INCREMENT PRIMARY KEY,
            title varchar(100) NULL UNIQUE
        ) $charset_collate;";
    $wpdb->query($sql);

    $table_name = $wpdb->prefix . "asdk_templates"; 
    $sql = "CREATE TABLE $table_name (
            id mediumint(9) NOT NULL AUTO_INCREMENT PRIMARY KEY,
            html text NOT NULL,
            key_type varchar(100) NULL UNIQUE
        ) $charset_collate;";
    $wpdb->query($sql);

    if($wpdb->get_var("SELECT COUNT(*) FROM $table_name") == 0) {
        $wpdb->insert($table_name, array('title' => 'WINDOWS10PRO'));
        $wpdb->insert($table_name, array('title' => 'WINDOWS10FAMILY'));
        $wpdb->insert($table_name, array('title' => 'OFFICE2021PRO'));
    }
}




// add woocommerce product hooks
// The code for displaying WooCommerce Product Custom Fields
add_action( 'woocommerce_product_options_general_product_data', 'woocommerce_product_custom_fields' ); 
// Following code Saves  WooCommerce Product Custom Fields
add_action( 'woocommerce_process_product_meta', 'woocommerce_product_custom_fields_save' );

function woocommerce_product_custom_fields () {
    global $woocommerce, $post, $wpdb;
    echo '<div class=" product_custom_field ">';

    $keys_types_table = $wpdb->prefix."asdk_keys_types";
    $keys_types_query = $wpdb->get_results("SELECT `title` FROM $keys_types_table");
    $keys_types = array(
        '' => 'Select key type'
    );
    foreach ($keys_types_query as $keys_type) {
        $keys_types[$keys_type->title] = $keys_type->title;
    }

    woocommerce_wp_select(
        array(
            'id' => '_asdk_product_type',
            'placeholder' => 'ASDK product type',
            'label' => __('ASDK product type', 'woocommerce'),
            'options' => $keys_types
        )
    );
    
    echo '<a href="'. admin_url("admin.php?page=add-key-type") .'" style="margin-left: 10px;">Add new key type</a>';

    echo '</div>';
}

function woocommerce_product_custom_fields_save($post_id)
{
    // Custom Product Text Field
    $woocommerce_asdk_product_type = $_POST['_asdk_product_type'];
    if (!empty($woocommerce_asdk_product_type))
        update_post_meta($post_id, '_asdk_product_type', esc_attr($woocommerce_asdk_product_type));
}

// add order hooks
// check whenever order status is changed from pending to processing
add_action( 'woocommerce_order_status_pending_to_processing', 'asdk_order_status_pending_to_processing', 10, 2 );
// check whenever order status is changed from pending to on hold
add_action( 'woocommerce_order_status_pending_to_on-hold', 'asdk_order_status_pending_to_on_hold', 10, 1 ); 

function asdk_order_status_pending_to_processing($order_id, $order = false)
{
    // setting up $keys_by_type
    global $wpdb;

    $asdk_keys = $wpdb->prefix."asdk_keys";
    $asdk_keys_users = $wpdb->prefix."asdk_keys_users";
    $asdk_keys_types = $wpdb->prefix."asdk_keys_types";
    $asdk_templates = $wpdb->prefix."asdk_templates";

    $asdk_keys_types_query = $wpdb->get_results("SELECT * FROM $asdk_keys_types");

    $keys_by_type = array();
    foreach ($asdk_keys_types_query as $key_type) {
        $keys_by_type[$key_type->title] = array();
    }

    foreach ($keys_by_type as $key_type => $keys) {
        $asdk_key_query = $wpdb->get_results("SELECT * FROM $asdk_keys WHERE `key_type` = '$key_type'");
        if (count($asdk_key_query) > 0) {
            foreach ($asdk_key_query as $key) {
                $keys_by_type[$key_type][] = $key->activation_key;
            }
        }
    }
    // remove key_type from keys_by_type if it is empty
    foreach ($keys_by_type as $key_type => $keys) {
        if (count($keys) == 0) {
            unset($keys_by_type[$key_type]);
        }
    }
    // setting up $keys_by_type


    // setting up $products_data
    // get the order
    $order = wc_get_order( $order_id );
    // get the order items
    $items = $order->get_items();
    // get the order items product ids and types
    $products_data = array_map(
        function($item) {
            $array = array();
            $array['product_id'] = $item->get_product_id();
            $array['product_title'] = $item->get_name();
            $array['product_quantity'] = $item->get_quantity();
            // $array['product_quantity'] = 2;
            $array['asdk_type'] = get_post_meta($item->get_product_id(), '_asdk_product_type', true);
            return $array;
        },
        $items
    );
    $buyer = array(
        'name' => $order->get_billing_first_name() . ' ' . $order->get_billing_last_name(),
        'email' => $order->get_billing_email(),
    );
    // setting up $products_data and $buyer

    $available_keys = array();
    foreach ($keys_by_type as $key_type => $keys) {
        $available_keys[] = $key_type;
    }


    foreach ($products_data as $product_data) {
        // check if product asdk_type is in keys_by_type
        if ( array_key_exists($product_data["asdk_type"], $keys_by_type)) {

            $quantity = $product_data["product_quantity"];
            $keys = $keys_by_type[$product_data["asdk_type"]];
            $keys_count = count($keys_by_type[$product_data["asdk_type"]]);

            echo $product_data["product_title"] . ": " . $quantity . "<br>";
            echo "Product type: " . $product_data["asdk_type"] . "<br>";
            echo "Available keys for $product_data[asdk_type]: " . $keys_count . "<br>";

            // if there are enough keys for this product type
            if ($quantity > $keys_count) {

                // notify admin that the keys were not sent to the buyer
                $subject = "Keys for $order_id were not sent to the buyer";
                $message = "There are not enough keys for $product_data[asdk_type] for order $order_id. because there are only $keys_count keys available. Please add more keys for $product_data[asdk_type]";
                wp_mail( get_option('admin_email'), $subject, $message );
                // notify admin that the keys were not sent to the buyer

            } else {

                // get a keys for the product
                $keys_and_quantity = array();
                foreach ($keys as $key) {
                    $query = $wpdb->get_results("
                        SELECT * 
                        FROM $asdk_keys 
                        WHERE  `activation_key` = '$key' AND `used` = 0 AND `key_count` >= $quantity
                        OR  `activation_key` = '$key' AND `used` = 0 AND `key_count` = -1
                    ");
                    foreach ($query as $key_data) {
                        $keys_and_quantity[] = array(
                            'key' => $query[0]->activation_key,
                            'quantity' => $query[0]->key_count
                        );
                    }
                }

                if ($quantity <= count($keys_and_quantity)) {
                    // check if there is a template for this product type
                    $template_query = $wpdb->get_results("SELECT * FROM $asdk_templates WHERE `key_type` = '$product_data[asdk_type]'");
                    $keys_and_quantity = array_slice($keys_and_quantity, 0, $quantity);
                    $keys_string = "";

                    $count = count($keys_and_quantity);
                    $i = 0;
                    foreach ($keys_and_quantity as $key_and_quantity) {
                        $keys_string .= $key_and_quantity['key'];
                        if(++$i !== $count) {
                            $keys_string .= " / ";
                        }
                    }

                    // send $quantity keys to the buyer
                    $subject = $product_data["product_title"]." - $quantity keys";
                    $from = get_option('admin_email');
                    if ($template_query) {
                        if ($template_query[0]->html != '') {
                            $message = stripcslashes($template_query[0]->html);
                            // replace a string in the message with the keys
                            $message = str_replace("[THE_KEYS]", $keys_string, $message);
                        } else {
                            $message = "Hello, thank you for trusting us.<br>";
                            if ($quantity == 1) {
                                $message .= "Here is your key for $product_data[product_title]:<br><br>";
                            } else {
                                $message .= "Here are your keys for $product_data[product_title]:<br><br>";
                            }
                            $message .= $keys_string;
                            $message .= "<br><br>";
                            $message .= "<p style='color: red;'>YOU CAN USE YOUR KEY ONLY ONCE!!!!!</p><br><p style='color: red;'>MAKE SURE THE KEY IS RIGHT BEFORE SUBMITTING</p>";
                        }
                    } else {
                        $message = "Hello, thank you for trusting us.<br>";
                        if ($quantity == 1) {
                            $message .= "Here is your key for $product_data[product_title]:<br><br>";
                        } else {
                            $message .= "Here are your keys for $product_data[product_title]:<br><br>";
                        }
                        $message .= $keys_string;
                        $message .= "<br><br>";
                        $message .= "<p style='color: red;'>YOU CAN USE YOUR KEY ONLY ONCE!!!!!</p><br><p style='color: red;'>MAKE SURE THE KEY IS RIGHT BEFORE SUBMITTING</p>";
                    }
                    echo $message;
                    exit;
                    // email as html
                    $headers = array('Content-Type: text/html; charset=UTF-8');
                    wp_mail( $buyer['email'], $subject, $message, $headers, array($from) );

                    // update key quantity in $keys_and_quantity
                    foreach ($keys_and_quantity as $key_and_quantity) {
                        if ($key_and_quantity['quantity'] != "-1") {
                            $key_and_quantity['quantity'] -= $quantity;
                        }
                        if ($key_and_quantity['quantity'] == "0") {
                            $wpdb->update(
                                $asdk_keys,
                                array(
                                    'key_count' => $key_and_quantity['quantity'],
                                    'used' => 1
                                ),
                                array(
                                    'activation_key' => $key_and_quantity['key']
                                )
                            );
                        } else {
                            $wpdb->update(
                                $asdk_keys,
                                array(
                                    'key_count' => $key_and_quantity['quantity'],
                                ),
                                array(
                                    'activation_key' => $key_and_quantity['key']
                                )
                            );
                        }
                    }
                    // create new asdk_keys_users row
                    $wpdb->insert(
                        $asdk_keys_users,
                        array(
                            'activation_key' => $keys_string,
                            'key_type' => $product_data["asdk_type"],
                            'sent_to' => $buyer['email'],
                            'sell_date' => date("Y-m-d H:i:s")
                        )
                    );

                    // send $quantity keys to the buyer

                    // notify admin that the keys were sent to the buyer
                    $subject = "Keys for $order_id were sent to the buyer";
                    $message = "The keys for $product_data[asdk_type] for order $order_id were sent to the buyer.";
                    wp_mail( get_option('admin_email'), $subject, $message );

                } else {
                    // notify admin that the keys were not sent to the buyer
                    $subject = "Keys for $order_id were not sent to the buyer";
                    $message = "There are not enough keys for $product_data[asdk_type] for order $order_id. because there are only " . count($keys_and_quantity) . " keys available. Please add more keys for $product_data[asdk_type] Please check the order and send the keys manually.";
                    wp_mail( get_option('admin_email'), $subject, $message );
                    // notify admin that the keys were not sent to the buyer
                }
            }
        } else {
            // notify admin that the keys were not sent to the buyer
            $subject = "Keys for $order_id were not sent to the buyer";
            $message = "There are no keys for $product_data[asdk_type] for order $order_id. Please check the order and send the keys manually. because there are no keys available for $product_data[asdk_type] Please check the order and send the keys manually.";
            wp_mail( get_option('admin_email'), $subject, $message );
        }
    }
    
    // echo "<pre>";
    // echo "--------";
    // echo "Buyer: ";
    // var_dump($buyer);
    // echo "--------";
    // echo "keys by type: ";
    // var_dump($keys_by_type);
    // echo "--------";
    // echo "available keys: ";
    // var_dump($available_keys);
    // echo "--------";
    // echo "products data: ";
    // var_dump($products_data);
    // echo "</pre>";
    // exit;
}

function asdk_order_status_pending_to_on_hold( $order_id ) {
    asdk_order_status_pending_to_processing( $order_id );
}


// check whenever the payment is completed
// add_action( 'woocommerce_payment_complete', 'asdk_payment_complete', 10, 1 );
// add order hooks


// add woocommerce orders hooks


// delete plugin
function dropTables()
{
    global $wpdb;
    # code...
    require(ABSPATH . 'wp-admin/includes/upgrade.php');

    $table_name = $wpdb->prefix . "asdk_keys";
    $sql = "DROP TABLE IF EXISTS $table_name";
    $wpdb->query($sql);
    $table_name = $wpdb->prefix . "asdk_keys_types";
    $sql = "DROP TABLE IF EXISTS $table_name";
    $wpdb->query($sql);
    $table_name = $wpdb->prefix . "asdk_keys_users";
    $sql = "DROP TABLE IF EXISTS $table_name";
    $wpdb->query($sql);

}

register_uninstall_hook(__FILE__,"dropTables");
